문제 설명
 

문제
연인 코니와 브라운은 광활한 들판에서 ‘나 잡아 봐라’ 게임을 한다. 이 게임은 브라운이 코니를 잡거나, 코니가 너무 멀리 달아나면 끝난다. 게임이 끝나는데 걸리는 최소 시간을 구하시오.

조건
코니는 처음 위치 C에서 1초 후 1만큼 움직이고, 이후에는 가속이 붙어 매 초마다 이전 이동 거리 + 1만큼 움직인다. 즉 시간에 따른 코니의 위치는 C, C + 1, C + 3, C + 6, …이다.
브라운은 현재 위치 B에서 다음 순간 B – 1, B + 1, 2 * B 중 하나로 움직일 수 있다.
코니와 브라운의 위치 p는 조건 0 <= x <= 200,000을 만족한다.
브라운은 범위를 벗어나는 위치로는 이동할 수 없고, 코니가 범위를 벗어나면 게임이 끝난다.
입력 형식
표준 입력의 첫 줄에 코니의 위치 C와 브라운의 위치 B를 공백으로 구분하여 순서대로 읽는다.

출력 형식
브라운이 코니를 잡을 수 있는 최소시간 N초를 표준 출력한다. 단 브라운이 코니를 잡지 못한 경우에는 -1을 출력한다.

예제 
입력: 11 2

출력: 5

코니의 위치: 11 → 12 → 14 → 17 → 21 → 26

브라운의 위치: 2 → 3 → 6 → 12 → 13 → 26

브라운은 코니를 5초 만에 잡을 수 있다.

```java

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
		static class point{
			int x;
			int y;
			
			point(int x, int y){
				this.x = x;
				this.y = y;
			}
		}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		
		int a = sc.nextInt();
		int b = sc.nextInt();
		
		go(a,b);
		
	}

	private static void go(int conyPosition, int brownPosition) {
		// TODO Auto-generated method stub
		int time =0;
		boolean[][] c = new boolean[200001][2];		
		Queue<point> q = new LinkedList();
		
		q.add(new point(brownPosition,0));
		
		while(true) {
			conyPosition+= time;
			
			if(conyPosition > 200000) {
				System.out.println(-1);
				return;
			}
			
			if(c[conyPosition][time%2]) {
				System.out.println(time +"@@@");
				return;
			}
			
			for(int i=0,size = q.size(); i<size; i++) {
				point p = q.poll();
				int curruentPosition = p.x;
				int newtime = (p.y+1)%2;
				int newPosition;
				
				
				newPosition = curruentPosition-1;
				if(newPosition >=0 && c[newPosition][newtime] == false) {
					c[newPosition][newtime] = true;
					q.add(new point(newPosition,newtime));
				}
				
				newPosition = curruentPosition+1;
				if(newPosition <200001 && c[newPosition][newtime] == false) {
					c[newPosition][newtime] = true;
					q.add(new point(newPosition,newtime));
				}
				
				newPosition = curruentPosition*2;
				if(newPosition <200001 && c[newPosition][newtime] == false) {
					c[newPosition][newtime] = true;
					q.add(new point(newPosition,newtime));
				}			
			}		
			time++;
		}
		
	}

}


```
